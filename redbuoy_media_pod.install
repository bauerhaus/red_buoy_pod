<?php

use Drupal\node\Entity\NodeType;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;

/**
 * Implements hook_install().
 */
function redbuoy_media_pod_install() {
  $content_type = 'podcast_episode';

  // 1. Create the podcast_episode content type if not exists.
  if (!NodeType::load($content_type)) {
    NodeType::create([
      'type' => $content_type,
      'name' => 'Podcast Episode',
      'description' => 'A single episode in a podcast feed.',
    ])->save();
  }

  // 2. Load field definitions from JSON file.
  $field_defs = redbuoy_media_pod_load_field_definitions();

  // 3. Create fields and assign to displays.
  foreach ($field_defs as $def) {
    redbuoy_media_pod_add_field($content_type, $def);
  }

  // 4. Load feed config and save defaults.
  $module_path = \Drupal::service('extension.list.module')->getPath('redbuoy_media_pod');

  $settings_path = DRUPAL_ROOT . '/' . $module_path . '/config/feed_settings.json';
  if (file_exists($settings_path)) {
    $settings_defs = json_decode(file_get_contents($settings_path), TRUE);
    $protected = [];
    $editable = [];

    foreach ($settings_defs as $def) {
      if (!empty($def['required'])) {
        $protected[] = $def;
      } else {
        $editable[] = $def;
      }
    }

    \Drupal::configFactory()->getEditable('redbuoy_media_pod.settings')
      ->set('feed_protected', $protected)
      ->set('feed_fields', $editable)
      ->save();
  }

  \Drupal::configFactory()->getEditable('redbuoy_media_pod.settings')
    ->set('feeds', ['default'])
    ->save();
}

/**
 * Implements hook_uninstall().
 */
function redbuoy_media_pod_uninstall() {
  $content_type = 'podcast_episode';

  // 1. Delete all nodes of type 'podcast_episode'.
  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $nids = $storage->getQuery()
    ->condition('type', $content_type)
    ->accessCheck(FALSE)
    ->execute();
  if (!empty($nids)) {
    $storage->delete($storage->loadMultiple($nids));
  }

  // 2. Remove unified config.
  \Drupal::configFactory()->getEditable('redbuoy_media_pod.settings')->delete();

  // 3. Delete the content type.
  if ($type = NodeType::load($content_type)) {
    $type->delete();
  }

  // 4. Remove fields defined in JSON.
  $field_defs = redbuoy_media_pod_load_field_definitions();
  foreach ($field_defs as $def) {
    $field_name = $def['name'];
    if ($config = FieldConfig::load("node.$content_type.$field_name")) {
      $config->delete();
    }
    if ($storage = FieldStorageConfig::loadByName('node', $field_name)) {
      $storage->delete();
    }
  }
}

/**
 * Adds a field and attaches it to form and view displays.
 */
function redbuoy_media_pod_add_field(string $bundle, array $field_def): void {
  $field_name = $field_def['name'];
  $field_type = $field_def['type'];
  $label = $field_def['label'] ?? $field_name;
  $description = $field_def['description'] ?? '';
  $required = $field_def['required'] ?? FALSE;
  $settings = $field_def['settings'] ?? [];

  // Field storage.
  if (!FieldStorageConfig::loadByName('node', $field_name)) {
    FieldStorageConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'node',
      'type' => $field_type,
      'cardinality' => 1,
      'settings' => $settings,
    ])->save();
  }

  // Field instance.
  if (!FieldConfig::loadByName('node', $bundle, $field_name)) {
    $config = FieldConfig::create([
      'field_name' => $field_name,
      'entity_type' => 'node',
      'bundle' => $bundle,
      'label' => $label,
      'description' => $description,
      'required' => $required,
    ]);
    if (!empty($settings)) {
      $config->setSettings($settings);
    }
    $config->save();
  }

  // Form display.
  $form_display = EntityFormDisplay::load("node.$bundle.default") ??
    EntityFormDisplay::create([
      'targetEntityType' => 'node',
      'bundle' => $bundle,
      'mode' => 'default',
      'status' => TRUE,
    ]);

  $widget_type = match ($field_type) {
    'text_long' => 'text_textarea',
    'string' => 'string_textfield',
    default => 'string_textfield',
  };

  $form_display->setComponent($field_name, [
    'type' => $widget_type,
    'weight' => 0,
  ])->save();

  // View display.
  $view_display = EntityViewDisplay::load("node.$bundle.default") ??
    EntityViewDisplay::create([
      'targetEntityType' => 'node',
      'bundle' => $bundle,
      'mode' => 'default',
      'status' => TRUE,
    ]);

  $formatter_type = match ($field_type) {
    'text_long' => 'text_default',
    'string' => 'string',
    default => 'string',
  };

  $view_display->setComponent($field_name, [
    'label' => 'above',
    'type' => $formatter_type,
    'weight' => 0,
  ])->save();
}

/**
 * Loads field definitions from the podcast_fields.json file.
 */
function redbuoy_media_pod_load_field_definitions(): array {
  $module_path = \Drupal::service('extension.list.module')->getPath('redbuoy_media_pod');
  $field_path = DRUPAL_ROOT . '/' . $module_path . '/config/podcast_fields.json';

  if (!file_exists($field_path)) {
    \Drupal::logger('redbuoy_media_pod')->warning('Field definition file not found: %path', ['%path' => $field_path]);
    return [];
  }

  $json = file_get_contents($field_path);
  $decoded = json_decode($json, TRUE);

  if (json_last_error() !== JSON_ERROR_NONE || !is_array($decoded)) {
    \Drupal::logger('redbuoy_media_pod')->error('Failed to parse field definition JSON: %error', [
      '%error' => json_last_error_msg(),
    ]);
    return [];
  }

  return $decoded;
}
